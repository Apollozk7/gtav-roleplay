import { PrismaClient } from '@prisma/client'
import bcrypt from 'bcryptjs'

const prisma = new PrismaClient()

async function setupPostgreSQL() {
  try {
    console.log('üöÄ Configurando banco PostgreSQL...')
    
    // Testar conex√£o
    await prisma.$connect()
    console.log('‚úÖ Conex√£o com PostgreSQL estabelecida!')
    
    // Criar usu√°rio admin se n√£o existir
    const existingAdmin = await prisma.user.findUnique({
      where: { email: 'admin@nonpc.network' }
    })

    if (!existingAdmin) {
      const hashedPassword = await bcrypt.hash('admin123', 12)
      
      await prisma.user.create({
        data: {
          username: 'admin',
          email: 'admin@nonpc.network',
          password: hashedPassword,
          cashTapUser: 'admin_cashtap',
          role: 'ADMIN'
        }
      })
      
      console.log('‚úÖ Usu√°rio admin criado!')
      console.log('   - Email: admin@nonpc.network')
      console.log('   - Senha: admin123')
    } else {
      console.log('‚ÑπÔ∏è  Usu√°rio admin j√° existe')
    }

    // Criar servi√ßos padr√£o se n√£o existirem
    const existingServices = await prisma.service.count()
    
    if (existingServices === 0) {
      const defaultServices = [
        {
          name: 'Transporte Seguro',
          description: 'Transporte discreto e seguro para qualquer localiza√ß√£o',
          price: 5000,
          type: 'TRANSPORT' as const
        },
        {
          name: 'Distra√ß√£o Policial',
          description: 'Cria√ß√£o de distra√ß√µes para facilitar opera√ß√µes',
          price: 3000,
          type: 'DISTRACTION' as const
        },
        {
          name: 'Roubo Coordenado',
          description: 'Opera√ß√µes de roubo com planejamento detalhado',
          price: 10000,
          type: 'THEFT' as const
        },
        {
          name: 'Intelig√™ncia',
          description: 'Coleta de informa√ß√µes e vigil√¢ncia',
          price: 7000,
          type: 'OTHER' as const
        }
      ]

      for (const service of defaultServices) {
        await prisma.service.create({
          data: service
        })
      }
      
      console.log('‚úÖ Servi√ßos padr√£o criados!')
    } else {
      console.log('‚ÑπÔ∏è  Servi√ßos j√° existem')
    }

    // Criar contatos padr√£o se n√£o existirem
    const existingContacts = await prisma.contact.count()
    
    if (existingContacts === 0) {
      const defaultContacts = [
        {
          type: 'DISCORD' as const,
          label: 'Discord Principal',
          value: 'npcnetwork#1234',
          description: 'Canal principal para comunica√ß√£o'
        },
        {
          type: 'TELEGRAM' as const,
          label: 'Telegram',
          value: '@npcnetwork',
          description: 'Grupo do Telegram'
        },
        {
          type: 'PHONE' as const,
          label: 'WhatsApp',
          value: '+55 11 99999-9999',
          description: 'Contato direto via WhatsApp'
        }
      ]

      for (const contact of defaultContacts) {
        await prisma.contact.create({
          data: contact
        })
      }
      
      console.log('‚úÖ Contatos padr√£o criados!')
    } else {
      console.log('‚ÑπÔ∏è  Contatos j√° existem')
    }

    console.log('üéâ Configura√ß√£o do PostgreSQL conclu√≠da com sucesso!')
    
  } catch (error) {
    console.error('‚ùå Erro na configura√ß√£o:', error)
    throw error
  } finally {
    await prisma.$disconnect()
  }
}

setupPostgreSQL()
