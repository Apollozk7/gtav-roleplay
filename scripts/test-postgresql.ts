import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function testPostgreSQL() {
  try {
    console.log('üß™ Teste PostgreSQL - Verificando configura√ß√£o...')
    
    // Testar conex√£o
    await prisma.$connect()
    console.log('‚úÖ Conex√£o com PostgreSQL estabelecida!')
    
    // Testar usu√°rios
    const userCount = await prisma.user.count()
    console.log(`üë• Total de usu√°rios: ${userCount}`)
    
    // Testar admin
    const admin = await prisma.user.findUnique({
      where: { email: 'admin@nonpc.network' }
    })
    
    if (admin) {
      console.log('‚úÖ Usu√°rio admin encontrado!')
      console.log(`   - Username: ${admin.username}`)
      console.log(`   - Role: ${admin.role}`)
    } else {
      console.log('‚ÑπÔ∏è  Usu√°rio admin n√£o encontrado (ser√° criado no primeiro deploy)')
    }
    
    // Testar servi√ßos
    const serviceCount = await prisma.service.count()
    console.log(`üõ†Ô∏è  Total de servi√ßos: ${serviceCount}`)
    
    if (serviceCount > 0) {
      const services = await prisma.service.findMany({
        take: 3
      })
      console.log('   Servi√ßos dispon√≠veis:')
      services.forEach(service => {
        console.log(`   - ${service.name}: R$ ${service.price}`)
      })
    } else {
      console.log('‚ÑπÔ∏è  Servi√ßos ser√£o criados no primeiro deploy')
    }
    
    // Testar contatos
    const contactCount = await prisma.contact.count()
    console.log(`üìû Total de contatos: ${contactCount}`)
    
    if (contactCount > 0) {
      const contacts = await prisma.contact.findMany({
        take: 3
      })
      console.log('   Contatos dispon√≠veis:')
      contacts.forEach(contact => {
        console.log(`   - ${contact.label}: ${contact.value}`)
      })
    } else {
      console.log('‚ÑπÔ∏è  Contatos ser√£o criados no primeiro deploy')
    }
    
    console.log('\nüéâ CONFIGURA√á√ÉO POSTGRESQL OK!')
    console.log('‚úÖ O sistema est√° pronto para produ√ß√£o na Vercel!')
    console.log('\nüìã Pr√≥ximos passos:')
    console.log('1. Crie um banco PostgreSQL na Vercel (Storage ‚Üí Create Database)')
    console.log('2. Configure a DATABASE_URL nas vari√°veis de ambiente')
    console.log('3. Fa√ßa o deploy do projeto')
    console.log('4. Execute npm run setup-postgresql para criar dados iniciais')
    
  } catch (error) {
    console.error('‚ùå Erro no teste:', error)
    console.log('\nüîç Poss√≠veis solu√ß√µes:')
    console.log('1. Verifique se a DATABASE_URL est√° configurada')
    console.log('2. Confirme se o banco PostgreSQL est√° acess√≠vel')
    console.log('3. Execute npx prisma db push para criar as tabelas')
    throw error
  } finally {
    await prisma.$disconnect()
  }
}

testPostgreSQL()
